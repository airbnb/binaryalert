rule win_ddkong_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.ddkong."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ddkong"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c685d2feffff70 c685d3feffff6c c685d4feffff69 c685d5feffff63 c685d6feffff61 c685d7feffff74 }
            // n = 6, score = 100
            //   c685d2feffff70       | mov                 byte ptr [ebp - 0x12e], 0x70
            //   c685d3feffff6c       | mov                 byte ptr [ebp - 0x12d], 0x6c
            //   c685d4feffff69       | mov                 byte ptr [ebp - 0x12c], 0x69
            //   c685d5feffff63       | mov                 byte ptr [ebp - 0x12b], 0x63
            //   c685d6feffff61       | mov                 byte ptr [ebp - 0x12a], 0x61
            //   c685d7feffff74       | mov                 byte ptr [ebp - 0x129], 0x74

        $sequence_1 = { 51 899804010000 ff55ec 50 ff55e8 e9???????? 80658a00 }
            // n = 7, score = 100
            //   51                   | push                ecx
            //   899804010000         | mov                 dword ptr [eax + 0x104], ebx
            //   ff55ec               | call                dword ptr [ebp - 0x14]
            //   50                   | push                eax
            //   ff55e8               | call                dword ptr [ebp - 0x18]
            //   e9????????           |                     
            //   80658a00             | and                 byte ptr [ebp - 0x76], 0

        $sequence_2 = { c645c069 c645c16e c645c267 c645c373 c645c441 }
            // n = 5, score = 100
            //   c645c069             | mov                 byte ptr [ebp - 0x40], 0x69
            //   c645c16e             | mov                 byte ptr [ebp - 0x3f], 0x6e
            //   c645c267             | mov                 byte ptr [ebp - 0x3e], 0x67
            //   c645c373             | mov                 byte ptr [ebp - 0x3d], 0x73
            //   c645c441             | mov                 byte ptr [ebp - 0x3c], 0x41

        $sequence_3 = { 39b518ffffff 7409 ffb518ffffff ff55b0 c3 55 8bec }
            // n = 7, score = 100
            //   39b518ffffff         | cmp                 dword ptr [ebp - 0xe8], esi
            //   7409                 | je                  0xb
            //   ffb518ffffff         | push                dword ptr [ebp - 0xe8]
            //   ff55b0               | call                dword ptr [ebp - 0x50]
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp

        $sequence_4 = { 68???????? ffd7 50 ffd6 89851cffffff c68500ffffff43 c68501ffffff72 }
            // n = 7, score = 100
            //   68????????           |                     
            //   ffd7                 | call                edi
            //   50                   | push                eax
            //   ffd6                 | call                esi
            //   89851cffffff         | mov                 dword ptr [ebp - 0xe4], eax
            //   c68500ffffff43       | mov                 byte ptr [ebp - 0x100], 0x43
            //   c68501ffffff72       | mov                 byte ptr [ebp - 0xff], 0x72

        $sequence_5 = { 898560ffffff c68530ffffff47 c68531ffffff65 c68532ffffff74 c68533ffffff4c c68534ffffff61 c68535ffffff73 }
            // n = 7, score = 100
            //   898560ffffff         | mov                 dword ptr [ebp - 0xa0], eax
            //   c68530ffffff47       | mov                 byte ptr [ebp - 0xd0], 0x47
            //   c68531ffffff65       | mov                 byte ptr [ebp - 0xcf], 0x65
            //   c68532ffffff74       | mov                 byte ptr [ebp - 0xce], 0x74
            //   c68533ffffff4c       | mov                 byte ptr [ebp - 0xcd], 0x4c
            //   c68534ffffff61       | mov                 byte ptr [ebp - 0xcc], 0x61
            //   c68535ffffff73       | mov                 byte ptr [ebp - 0xcb], 0x73

        $sequence_6 = { 8d7108 33c0 668b06 8be8 81e500f00000 81fd00300000 }
            // n = 6, score = 100
            //   8d7108               | lea                 esi, dword ptr [ecx + 8]
            //   33c0                 | xor                 eax, eax
            //   668b06               | mov                 ax, word ptr [esi]
            //   8be8                 | mov                 ebp, eax
            //   81e500f00000         | and                 ebp, 0xf000
            //   81fd00300000         | cmp                 ebp, 0x3000

        $sequence_7 = { c645be72 ffd6 8b3d???????? 50 ffd7 68???????? ffd0 }
            // n = 7, score = 100
            //   c645be72             | mov                 byte ptr [ebp - 0x42], 0x72
            //   ffd6                 | call                esi
            //   8b3d????????         |                     
            //   50                   | push                eax
            //   ffd7                 | call                edi
            //   68????????           |                     
            //   ffd0                 | call                eax

        $sequence_8 = { c6459763 c6459874 c6459969 c6459a76 c6459b65 c6459c43 c6459d6f }
            // n = 7, score = 100
            //   c6459763             | mov                 byte ptr [ebp - 0x69], 0x63
            //   c6459874             | mov                 byte ptr [ebp - 0x68], 0x74
            //   c6459969             | mov                 byte ptr [ebp - 0x67], 0x69
            //   c6459a76             | mov                 byte ptr [ebp - 0x66], 0x76
            //   c6459b65             | mov                 byte ptr [ebp - 0x65], 0x65
            //   c6459c43             | mov                 byte ptr [ebp - 0x64], 0x43
            //   c6459d6f             | mov                 byte ptr [ebp - 0x63], 0x6f

        $sequence_9 = { 8985e8feffff 8d45a0 50 8d45e4 50 c645a057 c645a153 }
            // n = 7, score = 100
            //   8985e8feffff         | mov                 dword ptr [ebp - 0x118], eax
            //   8d45a0               | lea                 eax, dword ptr [ebp - 0x60]
            //   50                   | push                eax
            //   8d45e4               | lea                 eax, dword ptr [ebp - 0x1c]
            //   50                   | push                eax
            //   c645a057             | mov                 byte ptr [ebp - 0x60], 0x57
            //   c645a153             | mov                 byte ptr [ebp - 0x5f], 0x53

    condition:
        7 of them and filesize < 81920
}