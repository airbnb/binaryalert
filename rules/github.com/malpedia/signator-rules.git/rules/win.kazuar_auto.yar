rule win_kazuar_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.kazuar."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.kazuar"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 4489c8 410fb70c42 6685c9 7417 e8???????? }
            // n = 5, score = 300
            //   4489c8               | ret                 
            //   410fb70c42           | xor                 edx, edx
            //   6685c9               | test                eax, eax
            //   7417                 | je                  0x1ec
            //   e8????????           |                     

        $sequence_1 = { 4c01de 31db 8b6e20 448b6618 }
            // n = 4, score = 300
            //   4c01de               | nop                 
            //   31db                 | dec                 eax
            //   8b6e20               | mov                 dword ptr [esp + 0x28], ecx
            //   448b6618             | dec                 eax

        $sequence_2 = { e8???????? 4889c1 4989c0 e8???????? 4c8d4c2428 31d2 }
            // n = 6, score = 300
            //   e8????????           |                     
            //   4889c1               | je                  0xe8d
            //   4989c0               | mov                 ebx, dword ptr [eax + 0x3c]
            //   e8????????           |                     
            //   4c8d4c2428           | xor                 edi, edi
            //   31d2                 | add                 ebx, eax

        $sequence_3 = { 4c01db 0fb71403 8b461c 498d1493 8b0402 4c01d8 }
            // n = 6, score = 300
            //   4c01db               | xor                 edx, edx
            //   0fb71403             | test                eax, eax
            //   8b461c               | je                  0xd4a
            //   498d1493             | dec                 eax
            //   8b0402               | mov                 ecx, ebx
            //   4c01d8               | dec                 eax

        $sequence_4 = { 0fbec0 41ffc1 4131c0 4569c097010001 ebdd }
            // n = 5, score = 300
            //   0fbec0               | mov                 eax, dword ptr [ebp - 0x24]
            //   41ffc1               | lea                 ecx, dword ptr [ebp - 0x1c]
            //   4131c0               | mov                 dword ptr [ebx + 4], 0x18b
            //   4569c097010001       | mov                 eax, 0x80131700
            //   ebdd                 | mov                 eax, 0x4024f4

        $sequence_5 = { 01c0 4c89442438 6689442430 4c8d442430 }
            // n = 4, score = 300
            //   01c0                 | add                 eax, eax
            //   4c89442438           | dec                 esp
            //   6689442430           | mov                 dword ptr [esp + 0x38], eax
            //   4c8d442430           | mov                 word ptr [esp + 0x30], ax

        $sequence_6 = { 8d45ec c7042400000000 8944240c 8d45f0 89442408 ffd1 }
            // n = 6, score = 300
            //   8d45ec               | pop                 ebp
            //   c7042400000000       | inc                 ecx
            //   8944240c             | pop                 esp
            //   8d45f0               | ret                 
            //   89442408             | dec                 eax
            //   ffd1                 | sub                 esp, 0x48

        $sequence_7 = { 4885c9 740d 89c2 66833c5100 }
            // n = 4, score = 300
            //   4885c9               | mov                 eax, edi
            //   740d                 | dec                 eax
            //   89c2                 | add                 ebx, ebx
            //   66833c5100           | dec                 esp

        $sequence_8 = { 4c01d8 eb07 48ffc3 ebc8 31c0 4883c420 5b }
            // n = 7, score = 300
            //   4c01d8               | dec                 eax
            //   eb07                 | test                eax, eax
            //   48ffc3               | je                  0x120f
            //   ebc8                 | mov                 edx, 0xde94459a
            //   31c0                 | ret                 
            //   4883c420             | push                ebx
            //   5b                   | dec                 eax

        $sequence_9 = { 31c9 41b804010000 488d5c242c 4889da ff15???????? }
            // n = 5, score = 300
            //   31c9                 | mov                 dword ptr [ebp - 0x1c], 0
            //   41b804010000         | mov                 eax, dword ptr [eax]
            //   488d5c242c           | mov                 ecx, dword ptr [eax + 0xc]
            //   4889da               | mov                 eax, 0x4024e4
            //   ff15????????         |                     

    condition:
        7 of them and filesize < 81920
}