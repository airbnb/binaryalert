rule win_ransomlock_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.ransomlock."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ransomlock"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e8???????? 83c418 6a00 8d8de0fdffff 51 53 }
            // n = 6, score = 100
            //   e8????????           |                     
            //   83c418               | add                 esp, 0x18
            //   6a00                 | push                0
            //   8d8de0fdffff         | lea                 ecx, dword ptr [ebp - 0x220]
            //   51                   | push                ecx
            //   53                   | push                ebx

        $sequence_1 = { 8d3c1a 3bf9 771a 8b7d0c 03f2 }
            // n = 5, score = 100
            //   8d3c1a               | lea                 edi, dword ptr [edx + ebx]
            //   3bf9                 | cmp                 edi, ecx
            //   771a                 | ja                  0x1c
            //   8b7d0c               | mov                 edi, dword ptr [ebp + 0xc]
            //   03f2                 | add                 esi, edx

        $sequence_2 = { 8bec 8b4508 8b48f8 8b5104 83c0f8 50 }
            // n = 6, score = 100
            //   8bec                 | mov                 ebp, esp
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   8b48f8               | mov                 ecx, dword ptr [eax - 8]
            //   8b5104               | mov                 edx, dword ptr [ecx + 4]
            //   83c0f8               | add                 eax, -8
            //   50                   | push                eax

        $sequence_3 = { c21400 5f b811000c80 5b 5d }
            // n = 5, score = 100
            //   c21400               | ret                 0x14
            //   5f                   | pop                 edi
            //   b811000c80           | mov                 eax, 0x800c0011
            //   5b                   | pop                 ebx
            //   5d                   | pop                 ebp

        $sequence_4 = { 5d c21000 56 85c9 7460 }
            // n = 5, score = 100
            //   5d                   | pop                 ebp
            //   c21000               | ret                 0x10
            //   56                   | push                esi
            //   85c9                 | test                ecx, ecx
            //   7460                 | je                  0x62

        $sequence_5 = { 55 8bec 8b4508 8b5014 8b4810 }
            // n = 5, score = 100
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   8b5014               | mov                 edx, dword ptr [eax + 0x14]
            //   8b4810               | mov                 ecx, dword ptr [eax + 0x10]

        $sequence_6 = { 50 66894802 ff15???????? 53 8d9decfbffff }
            // n = 5, score = 100
            //   50                   | push                eax
            //   66894802             | mov                 word ptr [eax + 2], cx
            //   ff15????????         |                     
            //   53                   | push                ebx
            //   8d9decfbffff         | lea                 ebx, dword ptr [ebp - 0x414]

        $sequence_7 = { 8b7d0c 03f2 8bcb f3a4 }
            // n = 4, score = 100
            //   8b7d0c               | mov                 edi, dword ptr [ebp + 0xc]
            //   03f2                 | add                 esi, edx
            //   8bcb                 | mov                 ecx, ebx
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]

        $sequence_8 = { 8b7d0c 03f2 8bcb f3a4 8b4d14 8919 }
            // n = 6, score = 100
            //   8b7d0c               | mov                 edi, dword ptr [ebp + 0xc]
            //   03f2                 | add                 esi, edx
            //   8bcb                 | mov                 ecx, ebx
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   8b4d14               | mov                 ecx, dword ptr [ebp + 0x14]
            //   8919                 | mov                 dword ptr [ecx], ebx

        $sequence_9 = { 57 6a07 6800000080 50 }
            // n = 4, score = 100
            //   57                   | push                edi
            //   6a07                 | push                7
            //   6800000080           | push                0x80000000
            //   50                   | push                eax

    condition:
        7 of them and filesize < 360448
}