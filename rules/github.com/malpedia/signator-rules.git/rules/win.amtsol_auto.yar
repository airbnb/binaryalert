rule win_amtsol_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.amtsol."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.amtsol"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 4e 0fb606 c1e010 4e 0fb616 c1e208 0bc2 }
            // n = 7, score = 100
            //   4e                   | dec                 esi
            //   0fb606               | movzx               eax, byte ptr [esi]
            //   c1e010               | shl                 eax, 0x10
            //   4e                   | dec                 esi
            //   0fb616               | movzx               edx, byte ptr [esi]
            //   c1e208               | shl                 edx, 8
            //   0bc2                 | or                  eax, edx

        $sequence_1 = { 56 57 8d4598 50 be0c010000 8d85a0000000 56 }
            // n = 7, score = 100
            //   56                   | push                esi
            //   57                   | push                edi
            //   8d4598               | lea                 eax, dword ptr [ebp - 0x68]
            //   50                   | push                eax
            //   be0c010000           | mov                 esi, 0x10c
            //   8d85a0000000         | lea                 eax, dword ptr [ebp + 0xa0]
            //   56                   | push                esi

        $sequence_2 = { 53 ff7508 8d0c30 8b01 ff500c 85c0 741a }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   ff7508               | push                dword ptr [ebp + 8]
            //   8d0c30               | lea                 ecx, dword ptr [eax + esi]
            //   8b01                 | mov                 eax, dword ptr [ecx]
            //   ff500c               | call                dword ptr [eax + 0xc]
            //   85c0                 | test                eax, eax
            //   741a                 | je                  0x1c

        $sequence_3 = { 47 8d45e8 50 e8???????? 59 8bc7 6a0a }
            // n = 7, score = 100
            //   47                   | inc                 edi
            //   8d45e8               | lea                 eax, dword ptr [ebp - 0x18]
            //   50                   | push                eax
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   8bc7                 | mov                 eax, edi
            //   6a0a                 | push                0xa

        $sequence_4 = { 33782c 33f7 8bfe c1ef10 23f9 8bbcb848040000 8bde }
            // n = 7, score = 100
            //   33782c               | xor                 edi, dword ptr [eax + 0x2c]
            //   33f7                 | xor                 esi, edi
            //   8bfe                 | mov                 edi, esi
            //   c1ef10               | shr                 edi, 0x10
            //   23f9                 | and                 edi, ecx
            //   8bbcb848040000       | mov                 edi, dword ptr [eax + edi*4 + 0x448]
            //   8bde                 | mov                 ebx, esi

        $sequence_5 = { 8d45e0 6a10 50 e8???????? 83c418 8d45e0 50 }
            // n = 7, score = 100
            //   8d45e0               | lea                 eax, dword ptr [ebp - 0x20]
            //   6a10                 | push                0x10
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c418               | add                 esp, 0x18
            //   8d45e0               | lea                 eax, dword ptr [ebp - 0x20]
            //   50                   | push                eax

        $sequence_6 = { 59 59 0f8e97000000 ff75fc ff15???????? 0fb7c0 8945fc }
            // n = 7, score = 100
            //   59                   | pop                 ecx
            //   59                   | pop                 ecx
            //   0f8e97000000         | jle                 0x9d
            //   ff75fc               | push                dword ptr [ebp - 4]
            //   ff15????????         |                     
            //   0fb7c0               | movzx               eax, ax
            //   8945fc               | mov                 dword ptr [ebp - 4], eax

        $sequence_7 = { 46 48 74ef eb03 8b750c 0fb63e c1e708 }
            // n = 7, score = 100
            //   46                   | inc                 esi
            //   48                   | dec                 eax
            //   74ef                 | je                  0xfffffff1
            //   eb03                 | jmp                 5
            //   8b750c               | mov                 esi, dword ptr [ebp + 0xc]
            //   0fb63e               | movzx               edi, byte ptr [esi]
            //   c1e708               | shl                 edi, 8

        $sequence_8 = { c645f023 c645f125 c645f264 c645f328 c645f425 c645f563 c645f629 }
            // n = 7, score = 100
            //   c645f023             | mov                 byte ptr [ebp - 0x10], 0x23
            //   c645f125             | mov                 byte ptr [ebp - 0xf], 0x25
            //   c645f264             | mov                 byte ptr [ebp - 0xe], 0x64
            //   c645f328             | mov                 byte ptr [ebp - 0xd], 0x28
            //   c645f425             | mov                 byte ptr [ebp - 0xc], 0x25
            //   c645f563             | mov                 byte ptr [ebp - 0xb], 0x63
            //   c645f629             | mov                 byte ptr [ebp - 0xa], 0x29

        $sequence_9 = { 891f 8918 8d4599 53 50 885d98 e8???????? }
            // n = 7, score = 100
            //   891f                 | mov                 dword ptr [edi], ebx
            //   8918                 | mov                 dword ptr [eax], ebx
            //   8d4599               | lea                 eax, dword ptr [ebp - 0x67]
            //   53                   | push                ebx
            //   50                   | push                eax
            //   885d98               | mov                 byte ptr [ebp - 0x68], bl
            //   e8????????           |                     

    condition:
        7 of them and filesize < 335872
}