rule win_wipbot_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.wipbot."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.wipbot"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 85c0 74eb 48 8b0b 31c0 eb0c 89c2 }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   74eb                 | je                  0xffffffed
            //   48                   | dec                 eax
            //   8b0b                 | mov                 ecx, dword ptr [ebx]
            //   31c0                 | xor                 eax, eax
            //   eb0c                 | jmp                 0xe
            //   89c2                 | mov                 edx, eax

        $sequence_1 = { e8???????? 6b53080d 48 8d4c2450 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   6b53080d             | imul                edx, dword ptr [ebx + 8], 0xd
            //   48                   | dec                 eax
            //   8d4c2450             | lea                 ecx, dword ptr [esp + 0x50]

        $sequence_2 = { 8b45dc 8b5508 8902 837d0c00 }
            // n = 4, score = 100
            //   8b45dc               | mov                 eax, dword ptr [ebp - 0x24]
            //   8b5508               | mov                 edx, dword ptr [ebp + 8]
            //   8902                 | mov                 dword ptr [edx], eax
            //   837d0c00             | cmp                 dword ptr [ebp + 0xc], 0

        $sequence_3 = { ba1b792868 83ec10 89c3 b88a758b1f e8???????? 85c0 }
            // n = 6, score = 100
            //   ba1b792868           | mov                 edx, 0x6828791b
            //   83ec10               | sub                 esp, 0x10
            //   89c3                 | mov                 ebx, eax
            //   b88a758b1f           | mov                 eax, 0x1f8b758a
            //   e8????????           |                     
            //   85c0                 | test                eax, eax

        $sequence_4 = { 01c0 668945f0 83c002 668945f2 b88a758b1f }
            // n = 5, score = 100
            //   01c0                 | add                 eax, eax
            //   668945f0             | mov                 word ptr [ebp - 0x10], ax
            //   83c002               | add                 eax, 2
            //   668945f2             | mov                 word ptr [ebp - 0xe], ax
            //   b88a758b1f           | mov                 eax, 0x1f8b758a

        $sequence_5 = { c68424ba00000074 48 8d8c2486000000 88c2 48 01c1 48 }
            // n = 7, score = 100
            //   c68424ba00000074     | mov                 byte ptr [esp + 0xba], 0x74
            //   48                   | dec                 eax
            //   8d8c2486000000       | lea                 ecx, dword ptr [esp + 0x86]
            //   88c2                 | mov                 dl, al
            //   48                   | dec                 eax
            //   01c1                 | add                 ecx, eax
            //   48                   | dec                 eax

        $sequence_6 = { 6748 8b4df0 48 8d64cc20 5f }
            // n = 5, score = 100
            //   6748                 | dec                 eax
            //   8b4df0               | mov                 ecx, dword ptr [ebp - 0x10]
            //   48                   | dec                 eax
            //   8d64cc20             | lea                 esp, dword ptr [esp + ecx*8 + 0x20]
            //   5f                   | pop                 edi

        $sequence_7 = { 49 89d4 b9de3e4b5a ba6cf4af8f 44 89c5 e8???????? }
            // n = 7, score = 100
            //   49                   | dec                 ecx
            //   89d4                 | mov                 esp, edx
            //   b9de3e4b5a           | mov                 ecx, 0x5a4b3ede
            //   ba6cf4af8f           | mov                 edx, 0x8faff46c
            //   44                   | inc                 esp
            //   89c5                 | mov                 ebp, eax
            //   e8????????           |                     

        $sequence_8 = { 8a140f 42 881408 49 ffc1 44 39ce }
            // n = 7, score = 100
            //   8a140f               | mov                 dl, byte ptr [edi + ecx]
            //   42                   | inc                 edx
            //   881408               | mov                 byte ptr [eax + ecx], dl
            //   49                   | dec                 ecx
            //   ffc1                 | inc                 ecx
            //   44                   | inc                 esp
            //   39ce                 | cmp                 esi, ecx

        $sequence_9 = { 83ec20 31f6 48 89cf e8???????? }
            // n = 5, score = 100
            //   83ec20               | sub                 esp, 0x20
            //   31f6                 | xor                 esi, esi
            //   48                   | dec                 eax
            //   89cf                 | mov                 edi, ecx
            //   e8????????           |                     

    condition:
        7 of them and filesize < 253952
}