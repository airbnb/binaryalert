rule win_arik_keylogger_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.arik_keylogger."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.arik_keylogger"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e9???????? b005 e9???????? b006 eb46 b007 eb42 }
            // n = 7, score = 100
            //   e9????????           |                     
            //   b005                 | mov                 al, 5
            //   e9????????           |                     
            //   b006                 | mov                 al, 6
            //   eb46                 | jmp                 0x48
            //   b007                 | mov                 al, 7
            //   eb42                 | jmp                 0x44

        $sequence_1 = { ff91b8000000 89c3 e8???????? 8d45fc e8???????? 58 85c0 }
            // n = 7, score = 100
            //   ff91b8000000         | call                dword ptr [ecx + 0xb8]
            //   89c3                 | mov                 ebx, eax
            //   e8????????           |                     
            //   8d45fc               | lea                 eax, dword ptr [ebp - 4]
            //   e8????????           |                     
            //   58                   | pop                 eax
            //   85c0                 | test                eax, eax

        $sequence_2 = { ff92d4010000 ba0d000000 8b45f4 8b4df4 8b09 ff91b4010000 0fb6450c }
            // n = 7, score = 100
            //   ff92d4010000         | call                dword ptr [edx + 0x1d4]
            //   ba0d000000           | mov                 edx, 0xd
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   8b4df4               | mov                 ecx, dword ptr [ebp - 0xc]
            //   8b09                 | mov                 ecx, dword ptr [ecx]
            //   ff91b4010000         | call                dword ptr [ecx + 0x1b4]
            //   0fb6450c             | movzx               eax, byte ptr [ebp + 0xc]

        $sequence_3 = { ff9210010000 8945f8 eb3b c745f800000000 8b45fc 8b4030 85c0 }
            // n = 7, score = 100
            //   ff9210010000         | call                dword ptr [edx + 0x110]
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   eb3b                 | jmp                 0x3d
            //   c745f800000000       | mov                 dword ptr [ebp - 8], 0
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]
            //   8b4030               | mov                 eax, dword ptr [eax + 0x30]
            //   85c0                 | test                eax, eax

        $sequence_4 = { c745f803000000 ff75f8 ff75fc e8???????? 09c0 0f95c0 8845f0 }
            // n = 7, score = 100
            //   c745f803000000       | mov                 dword ptr [ebp - 8], 3
            //   ff75f8               | push                dword ptr [ebp - 8]
            //   ff75fc               | push                dword ptr [ebp - 4]
            //   e8????????           |                     
            //   09c0                 | or                  eax, eax
            //   0f95c0               | setne               al
            //   8845f0               | mov                 byte ptr [ebp - 0x10], al

        $sequence_5 = { eb1a 8b442404 e8???????? 8b5c2408 89d8 e8???????? 8b442404 }
            // n = 7, score = 100
            //   eb1a                 | jmp                 0x1c
            //   8b442404             | mov                 eax, dword ptr [esp + 4]
            //   e8????????           |                     
            //   8b5c2408             | mov                 ebx, dword ptr [esp + 8]
            //   89d8                 | mov                 eax, ebx
            //   e8????????           |                     
            //   8b442404             | mov                 eax, dword ptr [esp + 4]

        $sequence_6 = { ff929c040000 8945f8 8b45fc 8b4030 e8???????? 8945f0 3b45f8 }
            // n = 7, score = 100
            //   ff929c040000         | call                dword ptr [edx + 0x49c]
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]
            //   8b4030               | mov                 eax, dword ptr [eax + 0x30]
            //   e8????????           |                     
            //   8945f0               | mov                 dword ptr [ebp - 0x10], eax
            //   3b45f8               | cmp                 eax, dword ptr [ebp - 8]

        $sequence_7 = { eb06 8b45e4 c600c9 8b45e4 c600c8 ff45e4 8a45d4 }
            // n = 7, score = 100
            //   eb06                 | jmp                 8
            //   8b45e4               | mov                 eax, dword ptr [ebp - 0x1c]
            //   c600c9               | mov                 byte ptr [eax], 0xc9
            //   8b45e4               | mov                 eax, dword ptr [ebp - 0x1c]
            //   c600c8               | mov                 byte ptr [eax], 0xc8
            //   ff45e4               | inc                 dword ptr [ebp - 0x1c]
            //   8a45d4               | mov                 al, byte ptr [ebp - 0x2c]

        $sequence_8 = { 8b5dec c9 c3 55 89e5 83ec40 8945f8 }
            // n = 7, score = 100
            //   8b5dec               | mov                 ebx, dword ptr [ebp - 0x14]
            //   c9                   | leave               
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   89e5                 | mov                 ebp, esp
            //   83ec40               | sub                 esp, 0x40
            //   8945f8               | mov                 dword ptr [ebp - 8], eax

        $sequence_9 = { ff919c000000 eb11 807ddc00 740b 8b45f4 8b4010 e8???????? }
            // n = 7, score = 100
            //   ff919c000000         | call                dword ptr [ecx + 0x9c]
            //   eb11                 | jmp                 0x13
            //   807ddc00             | cmp                 byte ptr [ebp - 0x24], 0
            //   740b                 | je                  0xd
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   8b4010               | mov                 eax, dword ptr [eax + 0x10]
            //   e8????????           |                     

    condition:
        7 of them and filesize < 4947968
}