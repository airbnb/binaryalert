rule win_cinobi_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.cinobi."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cinobi"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c9 c3 55 8bec 51 e8???????? 58 }
            // n = 7, score = 200
            //   c9                   | leave               
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   51                   | push                ecx
            //   e8????????           |                     
            //   58                   | pop                 eax

        $sequence_1 = { e8???????? 59 32c0 eb1f 8b450c 8b4dfc 8908 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   32c0                 | xor                 al, al
            //   eb1f                 | jmp                 0x21
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
            //   8908                 | mov                 dword ptr [eax], ecx

        $sequence_2 = { 48 c684072823000000 75f5 660fbe4653 668987d0200000 }
            // n = 5, score = 100
            //   48                   | dec                 eax
            //   c684072823000000     | mov                 byte ptr [edi + eax + 0x2328], 0
            //   75f5                 | jne                 0xfffffff7
            //   660fbe4653           | movsx               ax, byte ptr [esi + 0x53]
            //   668987d0200000       | mov                 word ptr [edi + 0x20d0], ax

        $sequence_3 = { 51 ff908b000000 837df805 751e 837dfc00 7504 b001 }
            // n = 7, score = 100
            //   51                   | push                ecx
            //   ff908b000000         | call                dword ptr [eax + 0x8b]
            //   837df805             | cmp                 dword ptr [ebp - 8], 5
            //   751e                 | jne                 0x20
            //   837dfc00             | cmp                 dword ptr [ebp - 4], 0
            //   7504                 | jne                 6
            //   b001                 | mov                 al, 1

        $sequence_4 = { 660fbe4040 668985acfaffff 8b85a8faffff 660fbe4030 668985aefaffff 8b85a8faffff }
            // n = 6, score = 100
            //   660fbe4040           | movsx               ax, byte ptr [eax + 0x40]
            //   668985acfaffff       | mov                 word ptr [ebp - 0x554], ax
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]
            //   660fbe4030           | movsx               ax, byte ptr [eax + 0x30]
            //   668985aefaffff       | mov                 word ptr [ebp - 0x552], ax
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]

        $sequence_5 = { 83ec0c e8???????? 8945f8 b878440700 0345f8 8945f4 }
            // n = 6, score = 100
            //   83ec0c               | sub                 esp, 0xc
            //   e8????????           |                     
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   b878440700           | mov                 eax, 0x74478
            //   0345f8               | add                 eax, dword ptr [ebp - 8]
            //   8945f4               | mov                 dword ptr [ebp - 0xc], eax

        $sequence_6 = { ffb087000000 ff75dc e8???????? 83c40c 8b4dc0 898187000000 8b45c0 }
            // n = 7, score = 100
            //   ffb087000000         | push                dword ptr [eax + 0x87]
            //   ff75dc               | push                dword ptr [ebp - 0x24]
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8b4dc0               | mov                 ecx, dword ptr [ebp - 0x40]
            //   898187000000         | mov                 dword ptr [ecx + 0x87], eax
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]

        $sequence_7 = { e8???????? 59 68d0070000 ff93b3000000 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   68d0070000           | push                0x7d0
            //   ff93b3000000         | call                dword ptr [ebx + 0xb3]

        $sequence_8 = { 51 894663 ffd0 8945ec 8d861f010000 }
            // n = 5, score = 100
            //   51                   | push                ecx
            //   894663               | mov                 dword ptr [esi + 0x63], eax
            //   ffd0                 | call                eax
            //   8945ec               | mov                 dword ptr [ebp - 0x14], eax
            //   8d861f010000         | lea                 eax, dword ptr [esi + 0x11f]

        $sequence_9 = { 51 52 e8???????? 83c418 b858020000 48 }
            // n = 6, score = 100
            //   51                   | push                ecx
            //   52                   | push                edx
            //   e8????????           |                     
            //   83c418               | add                 esp, 0x18
            //   b858020000           | mov                 eax, 0x258
            //   48                   | dec                 eax

        $sequence_10 = { ff75f0 8b45f8 ff90c7000000 83f801 7552 c745e810000000 }
            // n = 6, score = 100
            //   ff75f0               | push                dword ptr [ebp - 0x10]
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   ff90c7000000         | call                dword ptr [eax + 0xc7]
            //   83f801               | cmp                 eax, 1
            //   7552                 | jne                 0x54
            //   c745e810000000       | mov                 dword ptr [ebp - 0x18], 0x10

        $sequence_11 = { 8a4634 88842448010000 8a4624 88842449010000 8a464e 8884244a010000 8a4635 }
            // n = 7, score = 100
            //   8a4634               | mov                 al, byte ptr [esi + 0x34]
            //   88842448010000       | mov                 byte ptr [esp + 0x148], al
            //   8a4624               | mov                 al, byte ptr [esi + 0x24]
            //   88842449010000       | mov                 byte ptr [esp + 0x149], al
            //   8a464e               | mov                 al, byte ptr [esi + 0x4e]
            //   8884244a010000       | mov                 byte ptr [esp + 0x14a], al
            //   8a4635               | mov                 al, byte ptr [esi + 0x35]

        $sequence_12 = { 660fbe4005 6689854cfbffff 8b45f8 660fbe4003 }
            // n = 4, score = 100
            //   660fbe4005           | movsx               ax, byte ptr [eax + 5]
            //   6689854cfbffff       | mov                 word ptr [ebp - 0x4b4], ax
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   660fbe4003           | movsx               ax, byte ptr [eax + 3]

        $sequence_13 = { 6800000080 ff7508 8b45f4 ff507b 8945e8 837de8ff 7507 }
            // n = 7, score = 100
            //   6800000080           | push                0x80000000
            //   ff7508               | push                dword ptr [ebp + 8]
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   ff507b               | call                dword ptr [eax + 0x7b]
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax
            //   837de8ff             | cmp                 dword ptr [ebp - 0x18], -1
            //   7507                 | jne                 9

        $sequence_14 = { 57 e8???????? ff765f 8986af000000 ffb6b3000000 57 }
            // n = 6, score = 100
            //   57                   | push                edi
            //   e8????????           |                     
            //   ff765f               | push                dword ptr [esi + 0x5f]
            //   8986af000000         | mov                 dword ptr [esi + 0xaf], eax
            //   ffb6b3000000         | push                dword ptr [esi + 0xb3]
            //   57                   | push                edi

    condition:
        7 of them and filesize < 32768
}