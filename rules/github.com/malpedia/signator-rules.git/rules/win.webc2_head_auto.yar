rule win_webc2_head_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-10-07"
        version = "1"
        description = "Detects win.webc2_head."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.webc2_head"
        malpedia_rule_date = "20211007"
        malpedia_hash = "e5b790e0f888f252d49063a1251ca60ec2832535"
        malpedia_version = "20211008"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8a8c0cc0000000 eb02 b13d c1e810 83e03f 0fbec9 }
            // n = 6, score = 100
            //   8a8c0cc0000000       | mov                 cl, byte ptr [esp + ecx + 0xc0]
            //   eb02                 | jmp                 4
            //   b13d                 | mov                 cl, 0x3d
            //   c1e810               | shr                 eax, 0x10
            //   83e03f               | and                 eax, 0x3f
            //   0fbec9               | movsx               ecx, cl

        $sequence_1 = { c1f805 83e11f 8b048540cb4000 f644c80401 }
            // n = 4, score = 100
            //   c1f805               | sar                 eax, 5
            //   83e11f               | and                 ecx, 0x1f
            //   8b048540cb4000       | mov                 eax, dword ptr [eax*4 + 0x40cb40]
            //   f644c80401           | test                byte ptr [eax + ecx*8 + 4], 1

        $sequence_2 = { c605????????3d c605????????00 ffd3 6a00 55 }
            // n = 5, score = 100
            //   c605????????3d       |                     
            //   c605????????00       |                     
            //   ffd3                 | call                ebx
            //   6a00                 | push                0
            //   55                   | push                ebp

        $sequence_3 = { 83c8ff 5b 81c4341c0000 c20800 83c9ff }
            // n = 5, score = 100
            //   83c8ff               | or                  eax, 0xffffffff
            //   5b                   | pop                 ebx
            //   81c4341c0000         | add                 esp, 0x1c34
            //   c20800               | ret                 8
            //   83c9ff               | or                  ecx, 0xffffffff

        $sequence_4 = { ff15???????? e9???????? 68???????? b900010000 33c0 }
            // n = 5, score = 100
            //   ff15????????         |                     
            //   e9????????           |                     
            //   68????????           |                     
            //   b900010000           | mov                 ecx, 0x100
            //   33c0                 | xor                 eax, eax

        $sequence_5 = { 7416 8088????????10 8a9405ecfdffff 8890e0b84000 }
            // n = 4, score = 100
            //   7416                 | je                  0x18
            //   8088????????10       |                     
            //   8a9405ecfdffff       | mov                 dl, byte ptr [ebp + eax - 0x214]
            //   8890e0b84000         | mov                 byte ptr [eax + 0x40b8e0], dl

        $sequence_6 = { 8d9e38994000 803b00 8bcb 742c }
            // n = 4, score = 100
            //   8d9e38994000         | lea                 ebx, dword ptr [esi + 0x409938]
            //   803b00               | cmp                 byte ptr [ebx], 0
            //   8bcb                 | mov                 ecx, ebx
            //   742c                 | je                  0x2e

        $sequence_7 = { 57 8b7c2424 68???????? 57 e8???????? }
            // n = 5, score = 100
            //   57                   | push                edi
            //   8b7c2424             | mov                 edi, dword ptr [esp + 0x24]
            //   68????????           |                     
            //   57                   | push                edi
            //   e8????????           |                     

        $sequence_8 = { f3ab 68???????? e8???????? 6a03 68???????? 68???????? }
            // n = 6, score = 100
            //   f3ab                 | rep stosd           dword ptr es:[edi], eax
            //   68????????           |                     
            //   e8????????           |                     
            //   6a03                 | push                3
            //   68????????           |                     
            //   68????????           |                     

        $sequence_9 = { c1e902 f3a5 8bca 83e103 f3a4 8b5c2414 b910000000 }
            // n = 7, score = 100
            //   c1e902               | shr                 ecx, 2
            //   f3a5                 | rep movsd           dword ptr es:[edi], dword ptr [esi]
            //   8bca                 | mov                 ecx, edx
            //   83e103               | and                 ecx, 3
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   8b5c2414             | mov                 ebx, dword ptr [esp + 0x14]
            //   b910000000           | mov                 ecx, 0x10

    condition:
        7 of them and filesize < 106496
}